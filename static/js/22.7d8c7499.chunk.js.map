{"version":3,"sources":["../node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js","../node_modules/@ionic/core/dist/esm/ion-checkbox.entry.js"],"names":["hostContext","selector","el","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","undefined","Array","isArray","split","filter","c","trim","getClassList","forEach","SCHEME","openURL","url","ev","direction","animation","a","test","router","document","querySelector","preventDefault","push","Checkbox","hostRef","registerInstance","this","ionChange","createEvent","ionFocus","ionBlur","ionStyle","inputId","checkboxIds","name","checked","indeterminate","disabled","value","onClick","setFocus","onFocus","emit","onBlur","emitStyle","isChecked","buttonEl","focus","labelId","mode","getIonMode","label","findItemLabel","id","renderHiddenInput","path","h","d","part","Host","role","class","viewBox","type","ref","btnEl","getElement","style","ios","md"],"mappings":"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","file":"static/js/22.7d8c7499.chunk.js","sourcesContent":["const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { f as findItemLabel, c as renderHiddenInput } from './helpers-002e4980.js';\nimport { c as createColorClasses, h as hostContext } from './theme-ff3fc52f.js';\n\nconst checkboxIosCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:50%;--border-width:1px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.23);--background:var(--ion-item-background, var(--ion-background-color, #fff));--size:26px;width:var(--size);height:var(--size)}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:8px;margin-top:10px;margin-bottom:9px;display:block;position:static}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}}:host(.in-item[slot=start]){margin-left:2px;margin-right:20px;margin-top:8px;margin-bottom:8px}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:20px;margin-inline-end:20px}}\";\n\nconst checkboxMdCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:calc(var(--size) * .125);--border-width:2px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.51);--checkmark-width:3;--background:var(--ion-item-background, var(--ion-background-color, #fff));--transition:background 180ms cubic-bezier(0.4, 0, 0.2, 1);--size:18px;width:var(--size);height:var(--size)}.checkbox-icon path{stroke-dasharray:30;stroke-dashoffset:30}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{stroke-dashoffset:0;transition:stroke-dashoffset 90ms linear 90ms}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:0;margin-top:18px;margin-bottom:18px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:18px;margin-bottom:18px}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\n\nconst Checkbox = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.inputId = `ion-cb-${checkboxIds++}`;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n    this.name = this.inputId;\n    /**\n     * If `true`, the checkbox is selected.\n     */\n    this.checked = false;\n    /**\n     * If `true`, the checkbox will visually appear as indeterminate.\n     */\n    this.indeterminate = false;\n    /**\n     * If `true`, the user cannot interact with the checkbox.\n     */\n    this.disabled = false;\n    /**\n     * The value of the toggle does not mean if it's checked or not, use the `checked`\n     * property for that.\n     *\n     * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\n     * it's only used when the toggle participates in a native `<form>`.\n     */\n    this.value = 'on';\n    this.onClick = () => {\n      this.setFocus();\n      this.checked = !this.checked;\n      this.indeterminate = false;\n    };\n    this.onFocus = () => {\n      this.ionFocus.emit();\n    };\n    this.onBlur = () => {\n      this.ionBlur.emit();\n    };\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  checkedChanged(isChecked) {\n    this.ionChange.emit({\n      checked: isChecked,\n      value: this.value\n    });\n    this.emitStyle();\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      'checkbox-checked': this.checked,\n      'interactive-disabled': this.disabled,\n    });\n  }\n  setFocus() {\n    if (this.buttonEl) {\n      this.buttonEl.focus();\n    }\n  }\n  render() {\n    const { inputId, indeterminate, disabled, checked, value, color, el } = this;\n    const labelId = inputId + '-lbl';\n    const mode = getIonMode(this);\n    const label = findItemLabel(el);\n    if (label) {\n      label.id = labelId;\n    }\n    renderHiddenInput(true, el, this.name, (checked ? value : ''), disabled);\n    let path = indeterminate\n      ? h(\"path\", { d: \"M6 12L18 12\", part: \"mark\" })\n      : h(\"path\", { d: \"M5.9,12.5l3.8,3.8l8.8-8.8\", part: \"mark\" });\n    if (mode === 'md') {\n      path = indeterminate\n        ? h(\"path\", { d: \"M2 12H22\", part: \"mark\" })\n        : h(\"path\", { d: \"M1.73,12.91 8.1,19.28 22.79,4.59\", part: \"mark\" });\n    }\n    return (h(Host, { onClick: this.onClick, role: \"checkbox\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: createColorClasses(color, {\n        [mode]: true,\n        'in-item': hostContext('ion-item', el),\n        'checkbox-checked': checked,\n        'checkbox-disabled': disabled,\n        'checkbox-indeterminate': indeterminate,\n        'interactive': true\n      }) }, h(\"svg\", { class: \"checkbox-icon\", viewBox: \"0 0 24 24\", part: \"container\" }, path), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: this.disabled, ref: btnEl => this.buttonEl = btnEl })));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"checked\": [\"checkedChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nlet checkboxIds = 0;\nCheckbox.style = {\n  ios: checkboxIosCss,\n  md: checkboxMdCss\n};\n\nexport { Checkbox as ion_checkbox };\n"],"sourceRoot":""}